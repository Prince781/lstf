/**
 * Test: hover over a constructor
 * LSTF files act like the editor (client) interfacing
 * with the server.
 */

/* These are special variables that must be defined at
 * the head of the document.
 *
 * server_path: for pipe-based server communication
 * project_files: list of files in the project
 */
server_path = '/usr/bin/vala-language-server
project_files = [ 'constructor-example.vala ]

// at this point, the server is initialized
// we now proceed to the checks

/* This is a pattern-matching construct.
 * Only those fields specified will be checked against the 
 * return value of hover().
 * A field with the '?' means that the check will succeed if
 * either the field's value matches or the field is not present.
 * Without the '?' the check would fail if the field is not present.
 * 
 * The algorithm is simple and recursive: the value on the LHS 
 * matches the return value if all keys mentioned are present,
 * and their values match the associated values of RHS.
 *
 * In this example, `hover()` is a builtin function that corresponds
 * to the `textDocument/hover` method call invoked by the client to
 * the server. Here the two arguments are the line and character.
 *
 */
{
    contents: { language: "vala, value: "public Test" },
    range?: {
        start: { line: 2, character: 5 },
        end: { line: 2, character: 16 }
    }
} <=> hover(2, 10)

