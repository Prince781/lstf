<array_expression> -> '[' [<expression> [',' <expression> ...]] ']'
<assert_statement> -> assert <expression> ';'
<assignment_statement> -> (<member_access_expression> | <element_access_expression>) '=' <expression> ';'
<await_expression> -> await <expression>
<data_type> -> <simple_data_type> ['|' <simple_data_type> ...]
<declaration_statement> -> <enum_declaration> | <function_declaration> | <interface_declaration> | <type_alias_declaration> | <variable_declaration>
<element_access_expression> -> <expression> '[' <expression> [',' <expression> ...] ']'
<element_data_type> -> null | identifier ['<' <data_type> [',' <data_type> ...] '>'] | '(' <data_type> ')' | <object_data_type>
<ellipsis_expression> -> '...'
<enum_declaration> -> 'enum' identifier '{' <enum_member> [',' <enum_member> ...] '}'
<enum_member> -> identifier ['=' <expression>]
<expression_statement> -> <statement_expression> ';'
<function_data_type> -> ['async'] '(' [identifier ':' <data_type> [',' identifier ':' <data_type> ...]] ')' '=>' <data_type>
<function_declaration> -> ['async'] 'fun' identifier '(' [<parameter_declaration> [',' <parameter_declaration> ... ]] ')' ':' <data_type> '{' <statement_list> '}'
<interface_declaration> -> 'interface' identifier ['extends' identifier [',' identifier ...]] '{' [identifier ['?'] ':' <data_type> ';' [identifier ['?'] ':' <data_type> ';' ...]] '}'
<literal_expression> -> string | integer | double | boolean | null | verbatim_string
<member_access_expression> -> (<expression> '.' | epsilon) <simple_name>
<method_call_expression> -> <expression> '(' [<expression> [',' <expression> ...]] ')'
<object_data_type> -> '{' [identifier ':' <data_type> [';' identifier ':' <data_type> ...]] '}'
<object_expression> -> '{' [<object_property> [',' <object_property> ...]] '}'
<object_property> -> identifier ['?'] ':' <expression>
<parameter_declaration> -> identifier ':' <data_type>
<return_statement> -> return [<expression>] ';'
<simple_name> -> identifier
<simple_data_type> -> <element_data_type> ['[' ']' ['[' ']' ...]] | <function_data_type>
<statement> -> <assert_statement> | <assignment_statement> | <declaration_statement> | <expression_statement> | <return_statement>
<statement_expression> -> <method_call_expression> | <await_expression>
<statement_list> -> [<statement> [<statement> ...]]
<type_alias_declaration> -> 'type' identifier '=' <data_type> ';'
<variable_declaration> -> 'let' identifier [':' <data_type> ] '=' <expression> ';'

expressions:
<expression> -> <lambda_expression> | <conditional_expression>
<lambda_expression> -> ['async'] '(' [identifier [':' <data_type>] [',' [identifier [':' <data_type>] [',' ...]]]] ')' '=>' ('{' <statement_list> '}' | <expression>)
<conditional_expression> -> <coalescing_expression> ['?' <expression> ':' <expression>]
<coalescing_expression> -> <conditional_or_expression> ['??' <coalescing_expression>]*
<conditional_or_expression> -> <conditional_and_expression> ['||' <conditional_and_expression>]*
<conditional_and_expression> -> <in_expression> ['&&' <in_expression>]*
<in_expression> -> <inclusive_or_expression> ['in' <inclusive_or_expression>]
<inclusive_or_expression> -> <exclusive_or_expression> ['|' <exclusive_or_expression>]*
<exclusive_or_expression> -> <and_expression> ['^' <and_expression>]*
<and_expression> -> <equality_expression> ['&' <equality_expression>]*
<equality_expression> -> <relational_expression> [('==' | '!=' | '<=>') <relational_expression>]*
<relational_expression> -> <shift_expression> [([('<' | '<=' | '>' | '>=') <shift_expression>]* | 'is' <data_type> | 'as' <data_type>)]
<shift_expression> -> <additive_expression> [('<<' | '>>') <additive_expression>]*
<additive_expression> -> <multiplicative_expression> [('+' | '-') <multiplicative_expression>]*
<multiplicative_expression> -> <unary_expression> [('*' | '/' | '%') <unary_expression>]*
<unary_expression> -> ('-' | '!' | '~') <unary_expression> | <primary_expression>
<primary_expression> -> <simple_name> | <literal_expression> | <array_expression> | <object_expression> | <ellipsis_expression> | <method_call_expression> | <await_expression> | <element_access_expression> | '(' <expression> ')'
